document.getElementById('loginForm').addEventListener('submit', function(event) {
    // Basic front-end form validation
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;

    if (!email || !password) {
        alert('Please fill out both fields.');
        event.preventDefault(); // Prevent form submission
    } else {
        // Email and password are provided, proceed with form submission
        console.log('Logging in...');
    }
});

//Backend: Node.js + Express

const express = require('express');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt'); // For hashing passwords (used if you're storing them securely)
const session = require('express-session'); // For user session management

const app = express();
const port = 3000;

// Dummy database for users
const users = [
    { email: 'user@example.com', password: '$2b$10$L.Wr5tv2/iOszkVtq3g4r8OfbXQw5eD0mTb.RwmV0XpO2p5eI.kXi' } // Hashed password: 'password123'
];

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Session setup
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true
}));

// Serve static files (like login.html, styles.css, app.js)
app.use(express.static('public'));

// Login route
app.post('/login', (req, res) => {
    const { email, password } = req.body;

    // Find the user by email
    const user = users.find(user => user.email === email);
    if (!user) {
        return res.status(401).send('Invalid credentials');
    }

    // Compare password with the stored hash
    bcrypt.compare(password, user.password, (err, result) => {
        if (err || !result) {
            return res.status(401).send('Invalid credentials');
        }

        // User authenticated successfully, start a session
        req.session.user = { email: user.email };
        res.redirect('/dashboard'); // Redirect to a protected route (e.g., dashboard)
    });
});

// Dashboard route (protected)
app.get('/dashboard', (req, res) => {
    if (!req.session.user) {
        return res.redirect('/login'); // If not logged in, redirect to login
    }
    res.send(`<h1>Welcome, ${req.session.user.email}</h1><a href="/logout">Logout</a>`);
});

// Logout route
app.get('/logout', (req, res) => {
    req.session.destroy(err => {
        if (err) {
            return res.status(500).send('Failed to log out');
        }
        res.redirect('/login');
    });
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
