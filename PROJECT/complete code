const express = require('express');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const app = express();
const port = 3000;

// Dummy users (you can replace this with a real database)
const users = [
    { email: 'user@example.com', password: '$2a$10$A/NuUO7hxrtR7F3gsbHtpuXmD1ZdOln5l7tJ1qNmC1YX52lYa9Cuq' } // Hashed password: 'password123'
];

// Middleware to parse incoming form data
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Session setup
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true
}));

// Serve the combined Login/Signup page
app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Login / Sign Up - Social Media</title>
            <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        </head>
        <body>
            <div class="container">
                <div class="row justify-content-center align-items-center vh-100">
                    <div class="col-12 col-md-6 col-lg-4">
                        <div class="card">
                            <div class="card-body">
                                <h3 class="text-center" id="formTitle">Login to Your Account</h3>
                                <!-- Login Form -->
                                <form id="loginForm" method="POST" action="/login">
                                    <div class="form-group">
                                        <label for="loginEmail">Email</label>
                                        <input type="email" class="form-control" id="loginEmail" name="email" placeholder="Enter your email" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="loginPassword">Password</label>
                                        <input type="password" class="form-control" id="loginPassword" name="password" placeholder="Enter your password" required>
                                    </div>
                                    <button type="submit" class="btn btn-primary btn-block">Login</button>
                                    <p class="text-center mt-3">Don't have an account? <a href="#" id="showSignup">Sign up</a></p>
                                </form>

                                <!-- Sign Up Form (hidden by default) -->
                                <form id="signupForm" method="POST" action="/signup" style="display: none;">
                                    <h3 class="text-center" id="formTitleSignup">Create Your Account</h3>
                                    <div class="form-group">
                                        <label for="signupEmail">Email</label>
                                        <input type="email" class="form-control" id="signupEmail" name="email" placeholder="Enter your email" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="signupPassword">Password</label>
                                        <input type="password" class="form-control" id="signupPassword" name="password" placeholder="Enter your password" required>
                                    </div>
                                    <button type="submit" class="btn btn-primary btn-block">Sign Up</button>
                                    <p class="text-center mt-3">Already have an account? <a href="#" id="showLogin">Login</a></p>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                // Toggle between Login and Signup forms
                document.getElementById('showSignup').addEventListener('click', function(event) {
                    event.preventDefault();
                    document.getElementById('loginForm').style.display = 'none';
                    document.getElementById('signupForm').style.display = 'block';
                    document.getElementById('formTitle').innerText = "Sign Up to Create Account";
                });

                document.getElementById('showLogin').addEventListener('click', function(event) {
                    event.preventDefault();
                    document.getElementById('signupForm').style.display = 'none';
                    document.getElementById('loginForm').style.display = 'block';
                    document.getElementById('formTitleSignup').innerText = "Login to Your Account";
                });
            </script>
        </body>
        </html>
    `);
});

// Handle login logic
app.post('/login', (req, res) => {
    const { email, password } = req.body;

    // Find the user by email
    const user = users.find(user => user.email === email);
    if (!user) {
        return res.status(401).send('Invalid credentials');
    }

    // Compare password with the stored hash
    bcrypt.compare(password, user.password, (err, result) => {
        if (err || !result) {
            return res.status(401).send('Invalid credentials');
        }

        // User authenticated successfully, start a session
        req.session.user = { email: user.email };
        res.redirect('/dashboard'); // Redirect to a protected route (e.g., dashboard)
    });
});

// Handle signup logic
app.post('/signup', (req, res) => {
    const { email, password } = req.body;

    // Check if the email is already taken
    const existingUser = users.find(user => user.email === email);
    if (existingUser) {
        return res.status(400).send('Email already taken');
    }

    // Hash the password and create a new user
    bcrypt.hash(password, 10, (err, hashedPassword) => {
        if (err) {
            return res.status(500).send('Error hashing password');
        }

        const newUser = { email, password: hashedPassword };
        users.push(newUser); // In a real app, store this in a database
        req.session.user = { email: newUser.email };
        res.redirect('/dashboard');
    });
});

// Dashboard route (protected)
app.get('/dashboard', (req, res) => {
    if (!req.session.user) {
        return res.redirect('/'); // If not logged in, redirect to login/signup
    }
    res.send(`
        <h1>Welcome, ${req.session.user.email}</h1>
        <a href="/logout">Logout</a>
    `);
});

// Logout route
app.get('/logout', (req, res) => {
    req.session.destroy(err => {
        if (err) {
            return res.status(500).send('Failed to log out');
        }
        res.redirect('/'); // Redirect to login page after logout
    });
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
